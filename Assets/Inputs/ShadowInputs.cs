//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/ShadowInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ShadowInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ShadowInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ShadowInputs"",
    ""maps"": [
        {
            ""name"": ""Shadow"",
            ""id"": ""3ec03f87-195c-45fe-8f2e-8de5080b76e7"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""86a22989-a84a-4689-a969-b2c2142ab636"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Manipulate"",
                    ""type"": ""Button"",
                    ""id"": ""2f81b82d-077b-4524-b707-f3945b9c433e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Perspective"",
                    ""type"": ""Button"",
                    ""id"": ""3a80b09a-ce80-4703-abff-024c0fd17c4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""85dfd35a-8a50-4993-bcb3-f506155ee3fa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""a852e2a5-6321-44a3-a293-d9aecd9be0d3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fbb9f354-37f4-4aa5-85b8-d16da11b59c2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b2fbfaed-bfa3-4c0d-ad1a-c882397cff98"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bca30beb-1505-49da-b9bd-8f5e00013b38"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b6117746-6442-46f4-bd33-bc49a5706d01"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""b8deaec5-bb10-496b-865b-0c5559eb00f9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d0c82767-f34e-4ded-b5fa-547eb0364967"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""186d0f76-2913-4a47-b4bd-fcd1d55ab9cf"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c4468967-8953-4235-9207-8832af6d7699"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""51b452eb-10db-494d-9d4f-ae8691069bb8"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""384bb85e-b0c7-4122-b38f-9bd5c55e3c5e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Manipulate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed3ed4f9-feed-45b0-bfe6-cf3942b679e8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Manipulate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b2faf8f-cc25-4f1e-b0fd-28fb13eaf402"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Manipulate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f06fb086-5c53-4ea0-abbd-aec7ec18d99d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Perspective"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb2bfbb0-46b9-48b4-a31c-1436628459f1"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Perspective"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e149725-8199-459f-b791-8eb6214b8024"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d68ae043-2663-457e-b435-27c72bde70e9"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Shadow
        m_Shadow = asset.FindActionMap("Shadow", throwIfNotFound: true);
        m_Shadow_Move = m_Shadow.FindAction("Move", throwIfNotFound: true);
        m_Shadow_Manipulate = m_Shadow.FindAction("Manipulate", throwIfNotFound: true);
        m_Shadow_ChangePerspective = m_Shadow.FindAction("Change Perspective", throwIfNotFound: true);
        m_Shadow_Pause = m_Shadow.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Shadow
    private readonly InputActionMap m_Shadow;
    private List<IShadowActions> m_ShadowActionsCallbackInterfaces = new List<IShadowActions>();
    private readonly InputAction m_Shadow_Move;
    private readonly InputAction m_Shadow_Manipulate;
    private readonly InputAction m_Shadow_ChangePerspective;
    private readonly InputAction m_Shadow_Pause;
    public struct ShadowActions
    {
        private @ShadowInputs m_Wrapper;
        public ShadowActions(@ShadowInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Shadow_Move;
        public InputAction @Manipulate => m_Wrapper.m_Shadow_Manipulate;
        public InputAction @ChangePerspective => m_Wrapper.m_Shadow_ChangePerspective;
        public InputAction @Pause => m_Wrapper.m_Shadow_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Shadow; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShadowActions set) { return set.Get(); }
        public void AddCallbacks(IShadowActions instance)
        {
            if (instance == null || m_Wrapper.m_ShadowActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShadowActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Manipulate.started += instance.OnManipulate;
            @Manipulate.performed += instance.OnManipulate;
            @Manipulate.canceled += instance.OnManipulate;
            @ChangePerspective.started += instance.OnChangePerspective;
            @ChangePerspective.performed += instance.OnChangePerspective;
            @ChangePerspective.canceled += instance.OnChangePerspective;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IShadowActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Manipulate.started -= instance.OnManipulate;
            @Manipulate.performed -= instance.OnManipulate;
            @Manipulate.canceled -= instance.OnManipulate;
            @ChangePerspective.started -= instance.OnChangePerspective;
            @ChangePerspective.performed -= instance.OnChangePerspective;
            @ChangePerspective.canceled -= instance.OnChangePerspective;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IShadowActions instance)
        {
            if (m_Wrapper.m_ShadowActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShadowActions instance)
        {
            foreach (var item in m_Wrapper.m_ShadowActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShadowActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShadowActions @Shadow => new ShadowActions(this);
    public interface IShadowActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnManipulate(InputAction.CallbackContext context);
        void OnChangePerspective(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
